import javafx.application.Application;
import javafx.geometry.*;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.stage.Stage;
import java.sql.*;

public class ATMApp extends Application {
    private Stage stage;
    private Connection connection;
    private String currentCardNumber;

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        stage = primaryStage;
        primaryStage.setTitle("Welcome to ATM");
        connectToDatabase();
        showWelcomeScreen();
    }

    private void connectToDatabase() {
        try {
            connection = DriverManager.getConnection("jdbc:mysql://sql12.freesqldatabase.com:3306/sql12720036", "sql12720036", "R27XXi9vv8");
            System.out.println("Connected to database.");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

//by Nur Aisya' Sofea binti Husin (22012332)
    private void showWelcomeScreen() {
        Label label = new Label("Enter Card Number or Username:");
        TextField cardNumberField = new TextField();
        Button proceedButton = new Button("Proceed");
        Button cancelButton = new Button("Cancel");

        proceedButton.setOnAction(e -> {
            currentCardNumber = cardNumberField.getText();
            showPinEntryScreen(currentCardNumber);
        });
        cancelButton.setOnAction(e -> stage.close());

        GridPane gridPane = new GridPane();
        gridPane.setAlignment(Pos.CENTER);
        gridPane.setVgap(10);
        gridPane.setHgap(10);
        gridPane.add(label, 0, 0, 2, 1);
        gridPane.add(cardNumberField, 0, 1, 2, 1);
        gridPane.add(proceedButton, 0, 2);
        gridPane.add(cancelButton, 1, 2);
        GridPane.setHalignment(label, HPos.CENTER);
        GridPane.setHalignment(cardNumberField, HPos.CENTER);
        GridPane.setHalignment(proceedButton, HPos.RIGHT);
        GridPane.setHalignment(cancelButton, HPos.LEFT);

        Scene scene = new Scene(gridPane, 300, 200);
        stage.setScene(scene);
        stage.show();
    }

//by Lydia Natasha binti Muharral (24000481)
    private void showPinEntryScreen(String cardNumber) {
        GridPane grid = new GridPane();
        grid.setHgap(10);
        grid.setVgap(10);
        PasswordField pinField = new PasswordField();
        pinField.setPromptText("Enter PIN");
        grid.add(pinField, 0, 0, 3, 1);

        Button[] numberButtons = new Button[10];
        for (int i = 0; i < 10; i++) {
            numberButtons[i] = new Button(String.valueOf(i));
            numberButtons[i].setMinSize(50, 50);
            numberButtons[i].setOnAction(e -> {
                Button source = (Button) e.getSource();
                pinField.setText(pinField.getText() + source.getText());
            });
        }

        Button clearButton = new Button("Clear");
        clearButton.setMinSize(50, 50);
        clearButton.setOnAction(e -> pinField.clear());

        Button enterButton = new Button("Enter");
        enterButton.setMinSize(50, 50);
        enterButton.setOnAction(e -> {
            String enteredPin = pinField.getText();
            if (verifyPin(cardNumber, enteredPin)) {
                showMainMenu();
            } else {
                pinField.clear();
                showAlert("Invalid PIN", "The PIN entered is incorrect. Please try again.");
            }
        });

        grid.add(numberButtons[1], 0, 1);
        grid.add(numberButtons[2], 1, 1);
        grid.add(numberButtons[3], 2, 1);
        grid.add(numberButtons[4], 0, 2);
        grid.add(numberButtons[5], 1, 2);
        grid.add(numberButtons[6], 2, 2);
        grid.add(numberButtons[7], 0, 3);
        grid.add(numberButtons[8], 1, 3);
        grid.add(numberButtons[9], 2, 3);
        grid.add(numberButtons[0], 1, 4);
        grid.add(clearButton, 0, 4);
        grid.add(enterButton, 2, 4);

        Scene scene = new Scene(grid, 200, 250);
        stage.setScene(scene);
        stage.show();
    }

    private boolean verifyPin(String cardNumber, String pin) {
        try {
            String query = "SELECT * FROM users WHERE cardNumber = ? AND pin = ?";
            PreparedStatement statement = connection.prepareStatement(query);
            statement.setString(1, cardNumber);
            statement.setString(2, pin);
            ResultSet resultSet = statement.executeQuery();
            return resultSet.next();
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

//by Muhammad Aiman Haikal bin Mohammad Akmal Surish (24000458)
    private void showMainMenu() {
        Button balanceInquiryButton = new Button("Balance Inquiry");
        Button cashWithdrawalButton = new Button("Cash Withdrawal");
        Button depositButton = new Button("Deposit");
        Button exitButton = new Button("Exit");

        balanceInquiryButton.setOnAction(e -> showBalanceInquiry());
        cashWithdrawalButton.setOnAction(e -> showInputAmountScreen("withdraw"));
        depositButton.setOnAction(e -> showInputAmountScreen("deposit"));
        exitButton.setOnAction(e -> stage.close());

        GridPane gridPane = new GridPane();
        gridPane.setAlignment(Pos.CENTER);
        gridPane.setPadding(new Insets(10));
        gridPane.setHgap(10);
        gridPane.setVgap(10);
        gridPane.add(balanceInquiryButton, 0, 0);
        gridPane.add(cashWithdrawalButton, 0, 1);
        gridPane.add(depositButton, 0, 2);
        gridPane.add(exitButton, 0, 3);

        Scene scene = new Scene(gridPane, 300, 200);
        stage.setScene(scene);
        stage.show();
    }

//by Wan Nur Irdina binti Wan Hasbullah (24000247)
    private void showBalanceInquiry() {
        double currentBalance = getCurrentBalance();
        Label balanceLabel = new Label("Your current balance is: RM" + currentBalance);
        Button mainMenuButton = new Button("Main Menu");
        mainMenuButton.setOnAction(e -> showMainMenu());

        VBox vbox = new VBox(10);
        vbox.getChildren().addAll(balanceLabel, mainMenuButton);
        Scene scene = new Scene(vbox, 300, 200);
        stage.setScene(scene);
        stage.show();
    }

    private double getCurrentBalance() {
        try {
            String query = "SELECT balance FROM users WHERE cardNumber = ?";
            PreparedStatement statement = connection.prepareStatement(query);
            statement.setString(1, currentCardNumber);
            ResultSet resultSet = statement.executeQuery();
            if (resultSet.next()) {
                return resultSet.getDouble("balance");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return 0.0;
    }

//by Wardina Saffiya Binti Jamalulil (24000996)
    private void showInputAmountScreen(String type) {
        VBox inputBox = new VBox(10);
        inputBox.setAlignment(Pos.CENTER);
        Label titleLabel = new Label("Input Amount");
        Label amountLabel = new Label("Amount:");
        TextField amountField = new TextField();
        amountField.setPrefWidth(100);
        amountField.setMaxWidth(150);
        Button proceedButton = new Button("Proceed");
        Button cancelButton = new Button("Cancel");

        proceedButton.setOnAction(e -> {
            double amount = Double.parseDouble(amountField.getText());
            if (type.equals("withdraw")) {
                handleWithdrawal(amount);
            } else if (type.equals("deposit")) {
                handleDeposit(amount);
            }
            showMainMenu();
        });
        cancelButton.setOnAction(e -> showMainMenu());

        inputBox.getChildren().addAll(titleLabel, amountLabel, amountField, proceedButton, cancelButton);
        Scene scene = new Scene(inputBox, 300, 200);
        stage.setScene(scene);
        stage.show();
    }

    private void handleWithdrawal(double amount) {
        double currentBalance = getCurrentBalance();
        if (currentBalance >= amount) {
            updateBalance(currentBalance - amount);
            recordTransaction("withdrawal", amount);
            showAlert("Success", "Withdrawal successful. New balance: RM" + (currentBalance - amount));
        } else {
            showAlert("Error", "Insufficient funds.");
        }
    }

    private void handleDeposit(double amount) {
        double currentBalance = getCurrentBalance();
        updateBalance(currentBalance + amount);
        recordTransaction("deposit", amount);
        showAlert("Success", "Deposit successful. New balance: RM" + (currentBalance + amount));
    }

    private void updateBalance(double newBalance) {
        try {
            String query = "UPDATE users SET balance = ? WHERE cardNumber = ?";
            PreparedStatement statement = connection.prepareStatement(query);
            statement.setDouble(1, newBalance);
            statement.setString(2, currentCardNumber);
            statement.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void recordTransaction(String type, double amount) {
        try {
            String query = "INSERT INTO transactions (userId, type, amount) VALUES ((SELECT id FROM users WHERE cardNumber = ?), ?, ?)";
            PreparedStatement statement = connection.prepareStatement(query);
            statement.setString(1, currentCardNumber);
            statement.setString(2, type);
            statement.setDouble(3, amount);
            statement.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void showAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}
