import javafx.application.Application;
import javafx.geometry.HPos;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.PasswordField;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import java.sql.*;
import javafx.scene.control.Alert;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.HBox;

public class ATMApp extends Application {
    private Stage stage;
    private Connection connection;
    private String currentCardNumber;

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        stage = primaryStage;
        primaryStage.setTitle("JAVABREWER BANK");
        connectToDatabase();
        showWelcomeScreen();
    }

    private void connectToDatabase() {
        try {
            connection = DriverManager.getConnection("jdbc:mysql://sql12.freesqldatabase.com:3306/sql12722378", "sql12722378", "pYiUZsb4zk");
            System.out.println("Connected to database.");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void showWelcomeScreen() {
    Label label = new Label("Enter Your Card Number:");
    TextField cardNumberField = new TextField();
    Button proceedButton = new Button("Proceed");
    Button cancelButton = new Button("Cancel");

    proceedButton.setOnAction(e -> {
        currentCardNumber = cardNumberField.getText();
        showPinEntryScreen(currentCardNumber);
    });
    cancelButton.setOnAction(e -> stage.close());

    GridPane gridPane = new GridPane();
    gridPane.setAlignment(Pos.CENTER);
    gridPane.setVgap(10);
    gridPane.setHgap(10);

    gridPane.add(label, 0, 0, 2, 1);
    gridPane.add(cardNumberField, 0, 1, 2, 1);

    HBox buttonBox = new HBox(10); 
    buttonBox.setAlignment(Pos.CENTER);
    buttonBox.getChildren().addAll(proceedButton, cancelButton);

    gridPane.add(buttonBox, 0, 2, 2, 1); 

    GridPane.setHalignment(label, HPos.CENTER);
    GridPane.setHalignment(cardNumberField, HPos.CENTER);
    GridPane.setHalignment(buttonBox, HPos.CENTER);

    Scene scene = new Scene(gridPane, 600, 500);
    scene.getStylesheets().add(getClass().getResource("styles.css").toExternalForm());
    stage.setScene(scene);
    stage.show();
}


    private void showPinEntryScreen(String cardNumber) {
    GridPane grid = new GridPane();
    grid.setHgap(10);
    grid.setVgap(10);
    grid.setAlignment(Pos.CENTER); 
    
    PasswordField pinField = new PasswordField();
    pinField.setPromptText("Enter PIN");
    pinField.getStyleClass().add("password-field");
    grid.add(pinField, 0, 0, 3, 1);

    Button[] numberButtons = new Button[10];
    for (int i = 0; i < 10; i++) {
        numberButtons[i] = new Button(String.valueOf(i));
        numberButtons[i].setMinSize(50, 50);
        numberButtons[i].getStyleClass().add("button");
        numberButtons[i].setOnAction(e -> {
            Button source = (Button) e.getSource();
            pinField.setText(pinField.getText() + source.getText());
        });
    }

    Button clearButton = new Button("Clear");
    clearButton.setMinSize(50, 50);
    clearButton.getStyleClass().add("button");
    clearButton.setOnAction(e -> pinField.clear());

    Button enterButton = new Button("Enter");
    enterButton.setMinSize(50, 50);
    enterButton.getStyleClass().add("button");
    enterButton.setOnAction(e -> {
        String enteredPin = pinField.getText();
        if (verifyPin(cardNumber, enteredPin)) {
            showMainMenu();
        } else {
            pinField.clear();
            showAlert("Invalid PIN", "The PIN entered is incorrect. Please try again.");
        }
    });

    grid.add(numberButtons[1], 0, 1);
    grid.add(numberButtons[2], 1, 1);
    grid.add(numberButtons[3], 2, 1);
    grid.add(numberButtons[4], 0, 2);
    grid.add(numberButtons[5], 1, 2);
    grid.add(numberButtons[6], 2, 2);
    grid.add(numberButtons[7], 0, 3);
    grid.add(numberButtons[8], 1, 3);
    grid.add(numberButtons[9], 2, 3);
    grid.add(numberButtons[0], 1, 4);
    grid.add(clearButton, 0, 4);
    grid.add(enterButton, 2, 4);

    StackPane root = new StackPane();
    root.getChildren().add(grid);
    root.getStyleClass().add("root");

    Scene scene = new Scene(root, 600, 500); 
    scene.getStylesheets().add("styles.css");
    stage.setScene(scene);
    stage.show();
}


    private void proceedToNextWindow() {
    // Logic to show the next window
    System.out.println("Proceeding to the next window...");
}

private void handleUserLogin(String cardNumber, String pin) {
    // Temporarily bypass PIN verification
    boolean isVerified = verifyPin(cardNumber, pin);
    if (isVerified) {
        proceedToNextWindow();
    } else {
        System.out.println("Invalid PIN.");
    }
}

private boolean verifyPin(String cardNumber, String pin) {
    // For testing purposes: Always return true
    return true;
}



    private void showMainMenu() {
    Button balanceInquiryButton = new Button("Balance Inquiry");
    Button cashWithdrawalButton = new Button("Cash Withdrawal");
    Button depositButton = new Button("Deposit");
    Button exitButton = new Button("Exit");

    balanceInquiryButton.getStyleClass().add("main-menu-button");
    cashWithdrawalButton.getStyleClass().add("main-menu-button");
    depositButton.getStyleClass().add("main-menu-button");
    exitButton.getStyleClass().add("main-menu-button");
    
    balanceInquiryButton.setOnAction(e -> showBalanceInquiry());
    cashWithdrawalButton.setOnAction(e -> showInputAmountScreen("withdraw"));
    depositButton.setOnAction(e -> showInputAmountScreen("deposit"));
    exitButton.setOnAction(e -> stage.close());

    VBox vbox = new VBox(10); 
    vbox.setAlignment(Pos.CENTER); 
    vbox.getChildren().addAll(balanceInquiryButton, cashWithdrawalButton, depositButton, exitButton);

    StackPane root = new StackPane();
    root.getChildren().add(vbox);
    root.getStyleClass().add("root");

    Scene scene = new Scene(root, 600, 500); 
    scene.getStylesheets().add("styles.css");
    stage.setScene(scene);
    stage.show();
}

    private void showBalanceInquiry() {
    double currentBalance = getCurrentBalance();
    Label balanceLabel = new Label("Your current balance is: RM" + currentBalance);
    Button mainMenuButton = new Button("Main Menu");
    mainMenuButton.setOnAction(e -> showMainMenu());

    VBox vbox = new VBox(10);
    vbox.setAlignment(Pos.CENTER); 
    vbox.getChildren().addAll(balanceLabel, mainMenuButton);

    StackPane root = new StackPane();
    root.getChildren().add(vbox);
    root.getStyleClass().add("root");

    Scene scene = new Scene(root, 600, 500); 
    scene.getStylesheets().add("styles.css");
    stage.setScene(scene);
    stage.show();
}


    private double getCurrentBalance() {
        try {
            String query = "SELECT balance FROM users WHERE cardNumber = ?";
            PreparedStatement statement = connection.prepareStatement(query);
            statement.setString(1, currentCardNumber);
            ResultSet resultSet = statement.executeQuery();
            if (resultSet.next()) {
                return resultSet.getDouble("balance");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return 0.0;
    }

    private void showInputAmountScreen(String type) {
        VBox inputBox = new VBox(10);
        inputBox.setAlignment(Pos.CENTER);
        Label titleLabel = new Label("Input Amount");
        Label amountLabel = new Label("Amount:");
        TextField amountField = new TextField();
        amountField.setPrefWidth(100);
        amountField.setMaxWidth(150);
        Button proceedButton = new Button("Proceed");
        Button cancelButton = new Button("Cancel");

        proceedButton.setOnAction(e -> {
            double amount = Double.parseDouble(amountField.getText());
            if (type.equals("withdraw")) {
                handleWithdrawal(amount);
            } else if (type.equals("deposit")) {
                handleDeposit(amount);
            }
            showMainMenu();
        });
        cancelButton.setOnAction(e -> showMainMenu());

        inputBox.getChildren().addAll(titleLabel, amountLabel, amountField, proceedButton, cancelButton);
        Scene scene = new Scene(inputBox, 600, 500);
        scene.getStylesheets().add("styles.css");
        stage.setScene(scene);
        stage.show();
    }

    private void handleWithdrawal(double amount) {
        double currentBalance = getCurrentBalance();
        if (currentBalance >= amount) {
            updateBalance(currentBalance - amount);
            recordTransaction("withdrawal", amount);
            showAlert("Success", "Withdrawal successful. New balance: RM" + (currentBalance - amount));
        } else {
            showAlert("Error", "Insufficient funds.");
        }
    }

    private void handleDeposit(double amount) {
        double currentBalance = getCurrentBalance();
        updateBalance(currentBalance + amount);
        recordTransaction("deposit", amount);
        showAlert("Success", "Deposit successful. New balance: RM" + (currentBalance + amount));
    }

    private void updateBalance(double newBalance) {
        try {
            String query = "UPDATE users SET balance = ? WHERE cardNumber = ?";
            PreparedStatement statement = connection.prepareStatement(query);
            statement.setDouble(1, newBalance);
            statement.setString(2, currentCardNumber);
            statement.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void recordTransaction(String type, double amount) {
        try {
            String query = "INSERT INTO transactions (userId, type, amount) VALUES ((SELECT id FROM users WHERE cardNumber = ?), ?, ?)";
            PreparedStatement statement = connection.prepareStatement(query);
            statement.setString(1, currentCardNumber);
            statement.setString(2, type);
            statement.setDouble(3, amount);
            statement.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void showAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}
